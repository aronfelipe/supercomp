
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
struct dna
{
    int id;
    char dna_value;
};



int main() {

    // Defining n and m. Value of n is the length of the first sequence. Value of m is the length of the second sequence.
    int n; int m;

    // Reads n and m. 
    cin >> n >> m;

    // Defining the two vectors that receive the sequences.
    vector<dna> dnas_first_seq;
    vector<dna> dnas_second_seq;

    // Reserving n and m length on the vectors.
    dnas_first_seq.reserve(n);
    dnas_second_seq.reserve(m);

    dna dna_next;

    // Reads the first sequence and completes the dna_first_seq vector with the sequence.
    for(int i = 0; i < n; i++) {
        cin >> dna_next.dna_value;
        dna_next.id = i;
        dnas_first_seq.push_back(dna_next);
    }

    // for (auto& el: dnas_first_seq) {
    //     cout << el.dna_value;
    // }

    // cout << endl;

    // Reads the second sequence and completes the dna_second_seq vector with the sequence.
    for(int i = 0; i < m; i++) {
        cin >> dna_next.dna_value;
        dna_next.id = i;
        dnas_second_seq.push_back(dna_next);
    }

    // for (auto& el: dnas_second_seq) {
    //     cout << el.dna_value;
    // }

    // cout << endl;

    // Creating the matrix that will be used to Smith-Waterman algorithm.
    vector<vector<int> > matrix;

    vector<int> line;

    // Creating the first line of zeros of the matrix.
    for (int i = 0; i <= n; i++) {
        line.push_back(0);
    }
    matrix.push_back(line);

    // Creating the first column with zeros of the matrix.
    for (int i = 1; i <= n; i++) {
        vector<int> line_loop;
        for (int j = 0; j <= m; j++) {
            if (j == 0){
                line_loop.push_back(0);
            } else {
                line_loop.push_back(1);
            }
        }
        matrix.push_back(line_loop);
    }

    // Loop over the matrix
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            int diagonal = 0;
            // Calculate the diagonal. Seeing if its a mismatch, a gap or a match.
            if (dnas_first_seq[i-1].dna_value == dnas_second_seq[j-1].dna_value) {
                diagonal = matrix[i-1][j-1] + 2;
            } else {
                diagonal = matrix[i-1][j-1] - 1;
            }
            // Calculate the delection.
            int delection = matrix[i-1][j] - 1;
            // Calculate the insertion.
            int insertion = matrix[i][j-1] - 1;
            // Get the maximum between diagonal, delection, insertion and 0.
            int max_between_diagonal_delection = max(diagonal,delection);
            int max_between_diagonal_delection_insertion = max(max_between_diagonal_delection, insertion);
            matrix[i][j] = max(max_between_diagonal_delection_insertion, 0);
        }
        // cout << endl;
    }

    // for(auto& el: matrix) {
    //     for(auto& element: el) {
    //         cout << element;
    //     }
    //     cout << endl;
    // }

    // Get the max element of the matrix.
    int max_element = 0;
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= m; j++) {
            if (matrix[i][j] > max_element) {
                max_element = matrix[i][j];
            }
        }
    }

    // Print max element of the matrix.
    cout << max_element;

    return 0;
}